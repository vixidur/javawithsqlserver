
/**
 *
 * @author Admin
 */
import java.awt.event.ItemEvent;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ThongTinSinhVien extends javax.swing.JFrame {

    /**
     * Creates new form ThongTinSinhVien
     */
    public ThongTinSinhVien() {
        initComponents();
        hienThiDuLieu();
        GetAllMaLop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMaSV = new javax.swing.JTextField();
        txtHoTen = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txtXoa = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        cbMaLop = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("THÔNG TIN SINH VIÊN");

        jLabel2.setText("Mã sinh viên: ");

        jLabel3.setText("Họ tên:");

        jLabel4.setText("Email:");

        jLabel5.setText("Địa chỉ:");

        jButton1.setText("Thêm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Lưu");

        jButton3.setText("Sửa");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txtXoa.setText("Xoá");
        txtXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtXoaActionPerformed(evt);
            }
        });

        jButton5.setText("Hiển Thị");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Sinh Viên", "Họ tên", "Email", "Địa chỉ", "Mã Lớp"
            }
        ));
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        jLabel6.setText("Mã lớp:");

        cbMaLop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMaLopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMaSV)
                            .addComponent(txtHoTen)
                            .addComponent(txtEmail)
                            .addComponent(txtDiaChi, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                            .addComponent(cbMaLop, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(28, 28, 28)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtXoa))
                            .addComponent(jButton5))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMaSV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(txtXoa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbMaLop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        hienThiDuLieu();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Connection ketnoi = Ketnoi.Ketnoi.KetnoiSQL();
            String maSV = txtMaSV.getText();
            String hoten = txtHoTen.getText();
            String email = txtEmail.getText();
            String diachi = txtDiaChi.getText();
            String malop = cbMaLop.getSelectedItem().toString();

            // Kiểm tra xem mã sinh viên đã tồn tại trong cơ sở dữ liệu chưa
            String checkQuery = "SELECT * FROM thongtinsinhvien WHERE maSV = '" + maSV + "'";
            Statement checkStm = ketnoi.createStatement();
            ResultSet checkRs = checkStm.executeQuery(checkQuery);

            if (checkRs.next()) {
                // Mã sinh viên đã tồn tại, hiển thị thông báo lỗi
                JOptionPane.showMessageDialog(this, "Mã sinh viên đã tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            } else {
                // Mã sinh viên chưa tồn tại, thực hiện thêm mới bản ghi
                String insertQuery = "INSERT INTO thongtinsinhvien VALUES ('" + maSV + "', N'" + hoten + "', '" + email + "', '" + diachi + "', '" + malop + "')";
                Statement stm = ketnoi.createStatement();
                stm.executeUpdate(insertQuery);

                // Cập nhật lại dữ liệu trên bảng
                DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
                dtm.setRowCount(0);
                String sql1 = "SELECT * FROM thongtinsinhvien";
                ResultSet rs = stm.executeQuery(sql1);
                while (rs.next()) {
                    Object objList[] = {
                        rs.getInt(1),
                        rs.getString(2),
                        rs.getString(3),
                        rs.getString(4),
                        rs.getInt(5)
                    };

                    // add cac ban ghi vao mảng objectlist
                    dtm.addRow(objList);
                }
                tbl.setModel(dtm);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ThongTinSinhVien.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    private void GetAllMaLop() {
        Connection conn = Ketnoi.Ketnoi.KetnoiSQL(); // Kết nối đến cơ sở dữ liệu
        if (conn != null) {
            try {
                // Xóa tất cả các mục cũ trong ComboBox trước khi thêm mới
                cbMaLop.removeAllItems();

                // Truy vấn cơ sở dữ liệu để lấy thông tin mã lớp học
                String query = "SELECT msLop FROM thongtinlophoc";
                PreparedStatement ps = conn.prepareStatement(query);
                ResultSet rs = ps.executeQuery();

                // Thêm các mục mới vào ComboBox từ kết quả truy vấn
                while (rs.next()) {
                    // Lấy thông tin từ kết quả truy vấn và hiển thị trong ComboBox
                    String maLop = rs.getString("msLop");
                    cbMaLop.addItem(maLop);
                }

                // Đóng kết nối và các tài nguyên
                rs.close();
                ps.close();
                conn.close();
            } catch (SQLException ex) {
                System.out.println("Lỗi: " + ex.getMessage());
                ex.printStackTrace();
            }
        }
    }

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        int row = tbl.getSelectedRow();
        String ma = tbl.getValueAt(row, 0).toString();
        String tenSV = tbl.getValueAt(row, 1).toString();
        String email = tbl.getValueAt(row, 2).toString();
        String diachi = tbl.getValueAt(row, 3).toString();
        String maLop = tbl.getValueAt(row, 4).toString();

        txtMaSV.setText(ma);
        txtHoTen.setText(tenSV);
        txtEmail.setText(email);
        txtDiaChi.setText(diachi);
        cbMaLop.setSelectedItem(maLop);
    }//GEN-LAST:event_tblMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String maSVEdit = txtMaSV.getText();
        String tenSV = txtHoTen.getText();
        String email = txtEmail.getText();
        String diachi = txtDiaChi.getText();
        String maLop = cbMaLop.getSelectedItem().toString();
        try {
            Connection ketnoi = Ketnoi.Ketnoi.KetnoiSQL();
            String querry2 = "UPDATE thongtinsinhvien SET hoTen = N'" + tenSV + "', email = '" + email + "', diaChi = N'" + diachi + "', msLop = '" + maLop + "' WHERE maSV = '" + maSVEdit + "' ";
            Statement stm = ketnoi.createStatement();
            stm.executeUpdate(querry2);

            String sql1 = "SELECT * FROM thongtinsinhvien";
            ResultSet rs = stm.executeQuery(sql1);
            DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
            dtm.setRowCount(0);
            while (rs.next()) {
                Object objList[] = {
                    rs.getInt(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getInt(5)

                };

                dtm.addRow(objList);
                tbl.setModel(dtm);
            }
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(ThongTinLopHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed


    private void cbMaLopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMaLopActionPerformed
// Lấy mã lớp được chọn từ combo box
        String selectedMaLop = cbMaLop.getSelectedItem().toString();

        try {
            Connection conn = Ketnoi.Ketnoi.KetnoiSQL();
            if (conn != null) {
                String query = "SELECT * FROM thongtinsinhvien WHERE msLop = ?";
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, selectedMaLop);
                ResultSet rs = ps.executeQuery();

                DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
                dtm.setRowCount(0);

                // Hiển thị dữ liệu trên bảng
                while (rs.next()) {
                    Object objList[] = {
                        rs.getInt(1),
                        rs.getString(2),
                        rs.getString(3),
                        rs.getString(4),
                        rs.getInt(5)
                    };
                    dtm.addRow(objList);
                }
                tbl.setModel(dtm);

                rs.close();
                ps.close();
                conn.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
//        GetAllMaLop();
    }//GEN-LAST:event_cbMaLopActionPerformed
    private void hienThiDuLieu() {
        try {
            Connection kn = Ketnoi.Ketnoi.KetnoiSQL();
            String query = "SELECT * FROM thongtinsinhvien";
            Statement stm = kn.createStatement();
            ResultSet rs = stm.executeQuery(query);
            DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
            dtm.setRowCount(0);
            // kiểm tra các hàng chạy từ 0 -> n
            while (rs.next()) {
                Object objList[] = {
                    rs.getInt(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getInt(5)
                };
                dtm.addRow(objList);
            }
            tbl.setModel(dtm);
            stm.close();
            rs.close();
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(ThongTinLopHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    private void ClearTextField() {
        txtMaSV.setText("");
        txtHoTen.setText("");
        txtEmail.setText("");
        txtDiaChi.setText("");
        cbMaLop.setSelectedItem("");
    }
    private void txtXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtXoaActionPerformed
        Connection c = null;
        try {
            c = Ketnoi.Ketnoi.KetnoiSQL();
            int selectedRow = tbl.getSelectedRow();

            if (selectedRow != -1) {
                String ma = tbl.getValueAt(selectedRow, 0).toString();
                // Tạo truy vấn xóa dựa trên mã máy
                String del = "DELETE FROM thongtinsinhvien WHERE maSV = '" + ma + "'";
                Statement stm = c.createStatement();
                int result = stm.executeUpdate(del);
                if (result > 0) {
                    hienThiDuLieu();
                    ClearTextField();
                } else {
                    System.out.println("Xoá sinh viên thất bại!");
                }
                stm.close();
            } else {
                // Hiển thị thông báo cho người dùng nếu không có hàng nào được chọn
            }
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(ThongTinLopHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } finally {
            try {
                // Đóng kết nối sau khi sử dụng xong
                if (c != null) {
                    c.close();
                }
            } catch (SQLException ex) {
                java.util.logging.Logger.getLogger(ThongTinLopHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtXoaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThongTinSinhVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThongTinSinhVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThongTinSinhVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThongTinSinhVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThongTinSinhVien().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbMaLop;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMaSV;
    private javax.swing.JButton txtXoa;
    // End of variables declaration//GEN-END:variables
}
